<?php 

class Boxalino_Intelligence_Block_Recommendation extends Mage_Catalog_Block_Product_Abstract{

    /**
     * @var
     */
    private $_itemCollection;

    /**
     * @var
     */
    private $bxHelperData;

    /**
     *
     */
    public function _construct(){

        $this->bxHelperData = Mage::helper('intelligence');
        if($this->bxHelperData->isSetup()){
            $cmsBlock = $this->bxHelperData->getCmsBlock();
            if($cmsBlock){
                $recommendationBlocks = $this->getCmsRecommendationBlocks($cmsBlock);
                $this->prepareRecommendations($recommendationBlocks);
                $this->bxHelperData->setSetup(false);
            }else{
                $this->prepareRecommendations(array($this->_data));
            }
        }
        parent::_construct(); // TODO: Change the autogenerated stub
    }

    protected function getCmsRecommendationBlocks($content){

        $results = array();
        $recommendations = array();
        preg_match_all("/\{\{(.*?)\}\}/",$content, $results);

        if(isset($results[1])){
            foreach($results[1] as $result){
                if(strpos($result,'boxalino/recommendation')){
                    preg_match_all("/[-^\s](.*?)\=\"(.*?)\"/",$result, $sectionResults);
                    $result_holder = array();
                    foreach($sectionResults[1] as $index => $sectionResult){
                        $result_holder[$sectionResult] = $sectionResults[2][$index];
                    }
                    $recommendations[] = $result_holder;
                }
            }
        }
        return $recommendations;
    }

    protected function prepareRecommendations($recommendations = array()){

        if($recommendations && is_array($recommendations)){
            foreach($recommendations as $index => $widget){

                try{
                    $recommendation = array();
                    $widgetConfig = $this->bxHelperData->getWidgetConfig($widget['widget']);
                    
                    $recommendation['scenario'] = isset($widget['scenario']) ? $widget['scenario'] :
                        $widgetConfig['scenario'];
                    $recommendation['min'] = isset($widget['min']) ? $widget['min'] : $widgetConfig['min'];
                    $recommendation['max'] = isset($widget['max']) ? $widget['max'] : $widgetConfig['max'];

                    if (isset($widget['context'])) {
                        $recommendation['context'] = explode(',', str_replace(' ', '', $widget['context']));
                    } else {
                        $recommendation['context']  = $this->getWidgetContext($widgetConfig['scenario']);
                    }

                    $this->bxHelperData->getAdapter()->getRecommendation(
                        $widget['widget'],
                        $recommendation['context'],
                        $recommendation['scenario'],
                        3,
                        3,
                        false
                    );
                }catch(\Exception $e){
                    Mage::logException($e);
                }
            }
        }
        return null;
    }

    /**
     * @return mixed
     */
    public function _getLoadedProductCollection(){
        return $this->_getProductCollection();
    }

    /**
     * @return mixed
     */
    protected function _getProductCollection(){
        if(!$this->_itemCollection){
            $this->_prepareData();
        }
        return $this->_itemCollection;
    }

    /**
     * @return $this
     */
    protected function _prepareData(){

        $entity_ids = $this->bxHelperData->getAdapter()->getRecommendation(
            $this->getData('widget'),
            $this->getData('context')
        );

        if ((count($entity_ids) == 0)) {
            $entity_ids = array(0);
        }

        $this->_itemCollection = $this->_productCollection = Mage::getResourceModel('catalog/product_collection');
        $this->_itemCollection->addFieldToFilter('entity_id', $entity_ids)->addAttributeToSelect('*');
        $this->_itemCollection->setBxCount(count($entity_ids));
        $this->_itemCollection->load();

        return $this;
    }

    protected function _beforeToHtml()
    {
        $this->_prepareData();
        return parent::_beforeToHtml(); // TODO: Change the autogenerated stub
    }
}